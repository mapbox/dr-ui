// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Workflow with logged in user information 2 - Something is confusing Check UI element state 1`] = `
<Feedback
  feedbackSentryDsn="https://eccc8b561b9a461990309b01d33d54e3@sentry.io/1848287"
  location={
    Object {
      "hash": undefined,
      "pathname": "/mapbox-gl-js/api/",
    }
  }
  site="dr-ui"
  type="page"
  webhook={
    Object {
      "production": "",
      "staging": "",
    }
  }
>
  <FeedbackWrapper
    helpful={false}
    title="Something is confusing"
  >
    <div
      className="dr-ui--feedback wmax300"
    >
      <div
        className="bg-gray-faint round py12 px12"
      >
        <div
          className="flex flex--column"
        >
          <div
            className="flex flex--space-between-main w-full mb12"
          >
            <div
              className="txt-bold"
            >
              Something is confusing
            </div>
            <div>
              <Tooltip
                content="Close"
              >
                <TooltipProvider>
                  <TooltipProviderProvider
                    delayDuration={700}
                    disableHoverableContent={false}
                    isOpenDelayed={true}
                    isPointerInTransitRef={
                      Object {
                        "current": false,
                      }
                    }
                    onClose={[Function]}
                    onOpen={[Function]}
                    onPointerInTransitChange={[Function]}
                  >
                    <Tooltip
                      delayDuration={150}
                    >
                      <Popper
                        __scopePopper={
                          Object {
                            "Popper": Array [
                              Object {
                                "$$typeof": Symbol(react.context),
                                "Consumer": Object {
                                  "$$typeof": Symbol(react.context),
                                  "_calculateChangedBits": null,
                                  "_context": [Circular],
                                },
                                "Provider": Object {
                                  "$$typeof": Symbol(react.provider),
                                  "_context": [Circular],
                                },
                                "_calculateChangedBits": null,
                                "_currentRenderer": Object {},
                                "_currentRenderer2": null,
                                "_currentValue": undefined,
                                "_currentValue2": undefined,
                                "_threadCount": 0,
                              },
                              Object {
                                "$$typeof": Symbol(react.context),
                                "Consumer": Object {
                                  "$$typeof": Symbol(react.context),
                                  "_calculateChangedBits": null,
                                  "_context": [Circular],
                                },
                                "Provider": Object {
                                  "$$typeof": Symbol(react.provider),
                                  "_context": [Circular],
                                },
                                "_calculateChangedBits": null,
                                "_currentRenderer": null,
                                "_currentRenderer2": null,
                                "_currentValue": undefined,
                                "_currentValue2": undefined,
                                "_threadCount": 0,
                              },
                              Object {
                                "$$typeof": Symbol(react.context),
                                "Consumer": Object {
                                  "$$typeof": Symbol(react.context),
                                  "_calculateChangedBits": null,
                                  "_context": [Circular],
                                },
                                "Provider": Object {
                                  "$$typeof": Symbol(react.provider),
                                  "_context": [Circular],
                                },
                                "_calculateChangedBits": null,
                                "_currentRenderer": null,
                                "_currentRenderer2": null,
                                "_currentValue": Object {
                                  "hasParent": false,
                                  "positionUpdateFns": Set {},
                                },
                                "_currentValue2": Object {
                                  "hasParent": false,
                                  "positionUpdateFns": Set {},
                                },
                                "_threadCount": 0,
                              },
                            ],
                          }
                        }
                      >
                        <PopperProvider
                          anchor={
                            <button
                              aria-label="Close feedback"
                              class="link--gray"
                              data-state="closed"
                              id="feedback-close-button"
                            >
                              <svg
                                aria-hidden="true"
                                class="events-none icon"
                                data-testid="icon-close"
                                focusable="false"
                                style="width: 18px; height: 18px;"
                              >
                                <use
                                  xlink:href="#icon-close"
                                  xmlns:xlink="http://www.w3.org/1999/xlink"
                                />
                              </svg>
                              <span
                                style="position: absolute; border: 0px; width: 1px; height: 1px; padding: 0px; margin: -1px; overflow: hidden; clip: rect(0px, 0px, 0px, 0px); white-space: nowrap; word-wrap: normal;"
                              >
                                close
                              </span>
                            </button>
                          }
                          onAnchorChange={[Function]}
                          scope={
                            Object {
                              "Popper": Array [
                                Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": Object {},
                                  "_currentRenderer2": null,
                                  "_currentValue": undefined,
                                  "_currentValue2": undefined,
                                  "_threadCount": 0,
                                },
                                Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": undefined,
                                  "_currentValue2": undefined,
                                  "_threadCount": 0,
                                },
                                Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": Object {
                                    "hasParent": false,
                                    "positionUpdateFns": Set {},
                                  },
                                  "_currentValue2": Object {
                                    "hasParent": false,
                                    "positionUpdateFns": Set {},
                                  },
                                  "_threadCount": 0,
                                },
                              ],
                            }
                          }
                        >
                          <TooltipProvider
                            contentId="radix-1"
                            disableHoverableContent={false}
                            onClose={[Function]}
                            onOpen={[Function]}
                            onTriggerChange={[Function]}
                            onTriggerEnter={[Function]}
                            onTriggerLeave={[Function]}
                            open={false}
                            stateAttribute="closed"
                            trigger={
                              <button
                                aria-label="Close feedback"
                                class="link--gray"
                                data-state="closed"
                                id="feedback-close-button"
                              >
                                <svg
                                  aria-hidden="true"
                                  class="events-none icon"
                                  data-testid="icon-close"
                                  focusable="false"
                                  style="width: 18px; height: 18px;"
                                >
                                  <use
                                    xlink:href="#icon-close"
                                    xmlns:xlink="http://www.w3.org/1999/xlink"
                                  />
                                </svg>
                                <span
                                  style="position: absolute; border: 0px; width: 1px; height: 1px; padding: 0px; margin: -1px; overflow: hidden; clip: rect(0px, 0px, 0px, 0px); white-space: nowrap; word-wrap: normal;"
                                >
                                  close
                                </span>
                              </button>
                            }
                          >
                            <ForwardRef>
                              <TooltipTrigger
                                asChild={true}
                              >
                                <PopperAnchor
                                  __scopePopper={
                                    Object {
                                      "Popper": Array [
                                        Object {
                                          "$$typeof": Symbol(react.context),
                                          "Consumer": Object {
                                            "$$typeof": Symbol(react.context),
                                            "_calculateChangedBits": null,
                                            "_context": [Circular],
                                          },
                                          "Provider": Object {
                                            "$$typeof": Symbol(react.provider),
                                            "_context": [Circular],
                                          },
                                          "_calculateChangedBits": null,
                                          "_currentRenderer": Object {},
                                          "_currentRenderer2": null,
                                          "_currentValue": undefined,
                                          "_currentValue2": undefined,
                                          "_threadCount": 0,
                                        },
                                        Object {
                                          "$$typeof": Symbol(react.context),
                                          "Consumer": Object {
                                            "$$typeof": Symbol(react.context),
                                            "_calculateChangedBits": null,
                                            "_context": [Circular],
                                          },
                                          "Provider": Object {
                                            "$$typeof": Symbol(react.provider),
                                            "_context": [Circular],
                                          },
                                          "_calculateChangedBits": null,
                                          "_currentRenderer": null,
                                          "_currentRenderer2": null,
                                          "_currentValue": undefined,
                                          "_currentValue2": undefined,
                                          "_threadCount": 0,
                                        },
                                        Object {
                                          "$$typeof": Symbol(react.context),
                                          "Consumer": Object {
                                            "$$typeof": Symbol(react.context),
                                            "_calculateChangedBits": null,
                                            "_context": [Circular],
                                          },
                                          "Provider": Object {
                                            "$$typeof": Symbol(react.provider),
                                            "_context": [Circular],
                                          },
                                          "_calculateChangedBits": null,
                                          "_currentRenderer": null,
                                          "_currentRenderer2": null,
                                          "_currentValue": Object {
                                            "hasParent": false,
                                            "positionUpdateFns": Set {},
                                          },
                                          "_currentValue2": Object {
                                            "hasParent": false,
                                            "positionUpdateFns": Set {},
                                          },
                                          "_threadCount": 0,
                                        },
                                      ],
                                    }
                                  }
                                  asChild={true}
                                >
                                  <Primitive.div
                                    asChild={true}
                                  >
                                    <Slot>
                                      <SlotClone>
                                        <Primitive.button
                                          asChild={true}
                                          data-state="closed"
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onPointerDown={[Function]}
                                          onPointerLeave={[Function]}
                                          onPointerMove={[Function]}
                                        >
                                          <Slot
                                            data-state="closed"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onFocus={[Function]}
                                            onPointerDown={[Function]}
                                            onPointerLeave={[Function]}
                                            onPointerMove={[Function]}
                                          >
                                            <SlotClone
                                              data-state="closed"
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onFocus={[Function]}
                                              onPointerDown={[Function]}
                                              onPointerLeave={[Function]}
                                              onPointerMove={[Function]}
                                            >
                                              <button
                                                aria-label="Close feedback"
                                                className="link--gray"
                                                data-state="closed"
                                                id="feedback-close-button"
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onFocus={[Function]}
                                                onPointerDown={[Function]}
                                                onPointerLeave={[Function]}
                                                onPointerMove={[Function]}
                                              >
                                                <Icon
                                                  name="close"
                                                >
                                                  <AccessibleIcon
                                                    label="close"
                                                  >
                                                    <svg
                                                      aria-hidden="true"
                                                      className="events-none icon"
                                                      data-testid="icon-close"
                                                      focusable="false"
                                                      style={
                                                        Object {
                                                          "height": 18,
                                                          "width": 18,
                                                        }
                                                      }
                                                    >
                                                      <use
                                                        xlinkHref="#icon-close"
                                                        xmlnsXlink="http://www.w3.org/1999/xlink"
                                                      />
                                                    </svg>
                                                    <VisuallyHidden>
                                                      <Primitive.span
                                                        style={
                                                          Object {
                                                            "border": 0,
                                                            "clip": "rect(0, 0, 0, 0)",
                                                            "height": 1,
                                                            "margin": -1,
                                                            "overflow": "hidden",
                                                            "padding": 0,
                                                            "position": "absolute",
                                                            "whiteSpace": "nowrap",
                                                            "width": 1,
                                                            "wordWrap": "normal",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          style={
                                                            Object {
                                                              "border": 0,
                                                              "clip": "rect(0, 0, 0, 0)",
                                                              "height": 1,
                                                              "margin": -1,
                                                              "overflow": "hidden",
                                                              "padding": 0,
                                                              "position": "absolute",
                                                              "whiteSpace": "nowrap",
                                                              "width": 1,
                                                              "wordWrap": "normal",
                                                            }
                                                          }
                                                        >
                                                          close
                                                        </span>
                                                      </Primitive.span>
                                                    </VisuallyHidden>
                                                  </AccessibleIcon>
                                                </Icon>
                                              </button>
                                            </SlotClone>
                                          </Slot>
                                        </Primitive.button>
                                      </SlotClone>
                                    </Slot>
                                  </Primitive.div>
                                </PopperAnchor>
                              </TooltipTrigger>
                            </ForwardRef>
                            <TooltipPortal>
                              <TooltipPortalProvider>
                                <Presence
                                  present={false}
                                />
                              </TooltipPortalProvider>
                            </TooltipPortal>
                          </TooltipProvider>
                        </PopperProvider>
                      </Popper>
                    </Tooltip>
                  </TooltipProviderProvider>
                </TooltipProvider>
              </Tooltip>
            </div>
          </div>
          <div
            className="mb6 prose"
          >
            <CategoryConfusing
              option="What about this page is confusing? How can we improve the content?"
              placeholder="Let us know what is confusing."
              submitFeedback={[Function]}
            >
              <FeedbackTextarea
                id="feedback-problem-textarea"
                label="What about this page is confusing? How can we improve the content?"
                onChange={[Function]}
                placeholder="Let us know what is confusing."
                validationErrorMinimum={false}
              >
                <div
                  className="relative"
                >
                  <ControlTextarea
                    id="feedback-problem-textarea"
                    label="What about this page is confusing? How can we improve the content?"
                    onChange={[Function]}
                    placeholder="Let us know what is confusing."
                    themeControlTextarea="textarea hmin120 bg-white"
                    themeLabel="txt-m mb6"
                    validationError=""
                    value=""
                  >
                    <ControlWrapper
                      id="feedback-problem-textarea"
                      validationError=""
                    >
                      <div
                        className="relative "
                      >
                        <ControlLabel
                          id="feedback-problem-textarea"
                          optional={false}
                          text="What about this page is confusing? How can we improve the content?"
                          themeLabel="txt-m mb6"
                        >
                          <div>
                            <Label
                              asChild={true}
                              htmlFor="feedback-problem-textarea"
                            >
                              <LabelProvider
                                controlRef={
                                  Object {
                                    "current": null,
                                  }
                                }
                                id="radix-0"
                              >
                                <Primitive.span
                                  asChild={true}
                                  id="radix-0"
                                  onClick={[Function]}
                                  onMouseDown={[Function]}
                                  role="label"
                                >
                                  <Slot
                                    id="radix-0"
                                    onClick={[Function]}
                                    onMouseDown={[Function]}
                                    role="label"
                                  >
                                    <SlotClone
                                      id="radix-0"
                                      onClick={[Function]}
                                      onMouseDown={[Function]}
                                      role="label"
                                    >
                                      <label
                                        className="inline-block txt-m mb6"
                                        id="radix-0"
                                        onClick={[Function]}
                                        onMouseDown={[Function]}
                                        role="label"
                                      >
                                        What about this page is confusing? How can we improve the content?
                                         
                                      </label>
                                    </SlotClone>
                                  </Slot>
                                </Primitive.span>
                              </LabelProvider>
                            </Label>
                          </div>
                        </ControlLabel>
                        <textarea
                          aria-required={true}
                          className="textarea hmin120 bg-white"
                          data-testid="feedback-problem-textarea-textarea"
                          id="feedback-problem-textarea"
                          name="feedback-problem-textarea"
                          onChange={[Function]}
                          placeholder="Let us know what is confusing."
                          value=""
                        />
                        <div
                          role="alert"
                        />
                      </div>
                    </ControlWrapper>
                  </ControlTextarea>
                  <div
                    className="absolute bottom right mb6 mr18 txt-mono bg-lighten75 px3 txt-s"
                    id="feedback-length"
                  >
                    1000
                  </div>
                </div>
              </FeedbackTextarea>
              <FeedbackButton
                disabled={true}
                onClick={[Function]}
              >
                <button
                  className="btn btn--gray mt6"
                  disabled={true}
                  id="feedback-submit-button"
                  onClick={[Function]}
                >
                  Submit feedback
                </button>
              </FeedbackButton>
            </CategoryConfusing>
          </div>
          <div
            className="color-text"
          >
            Need help?
             
            <button
              className="link"
              onClick={[Function]}
              value="Contact support"
            >
              Contact support
            </button>
          </div>
        </div>
      </div>
    </div>
  </FeedbackWrapper>
</Feedback>
`;
