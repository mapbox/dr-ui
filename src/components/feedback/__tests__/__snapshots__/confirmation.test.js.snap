// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generate snapshot for feedback confirmation 1`] = `
<Feedback
  feedbackSentryDsn="https://eccc8b561b9a461990309b01d33d54e3@sentry.io/1848287"
  location={
    Object {
      "hash": "#lnglat",
      "pathname": "/mapbox-gl-js/api/",
    }
  }
  site="dr-ui"
  type="page"
  webhook={
    Object {
      "production": "",
      "staging": "",
    }
  }
>
  <FeedbackWrapper>
    <div
      className="dr-ui--feedback wmax300"
    >
      <div
        className="bg-gray-faint round py12 px12"
      >
        <div
          className="flex flex--column"
        >
          <div
            className="flex flex--space-between-main w-full mb12"
          >
            <div
              className="txt-bold"
            />
            <div>
              <Tooltip
                content="Close"
              >
                <TooltipProvider>
                  <TooltipProviderProvider
                    delayDuration={700}
                    disableHoverableContent={false}
                    isOpenDelayed={true}
                    isPointerInTransitRef={
                      Object {
                        "current": false,
                      }
                    }
                    onClose={[Function]}
                    onOpen={[Function]}
                    onPointerInTransitChange={[Function]}
                  >
                    <Tooltip
                      delayDuration={150}
                    >
                      <Popper
                        __scopePopper={
                          Object {
                            "Popper": Array [
                              Object {
                                "$$typeof": Symbol(react.context),
                                "Consumer": Object {
                                  "$$typeof": Symbol(react.context),
                                  "_calculateChangedBits": null,
                                  "_context": [Circular],
                                },
                                "Provider": Object {
                                  "$$typeof": Symbol(react.provider),
                                  "_context": [Circular],
                                },
                                "_calculateChangedBits": null,
                                "_currentRenderer": Object {},
                                "_currentRenderer2": null,
                                "_currentValue": undefined,
                                "_currentValue2": undefined,
                                "_threadCount": 0,
                              },
                              Object {
                                "$$typeof": Symbol(react.context),
                                "Consumer": Object {
                                  "$$typeof": Symbol(react.context),
                                  "_calculateChangedBits": null,
                                  "_context": [Circular],
                                },
                                "Provider": Object {
                                  "$$typeof": Symbol(react.provider),
                                  "_context": [Circular],
                                },
                                "_calculateChangedBits": null,
                                "_currentRenderer": null,
                                "_currentRenderer2": null,
                                "_currentValue": undefined,
                                "_currentValue2": undefined,
                                "_threadCount": 0,
                              },
                              Object {
                                "$$typeof": Symbol(react.context),
                                "Consumer": Object {
                                  "$$typeof": Symbol(react.context),
                                  "_calculateChangedBits": null,
                                  "_context": [Circular],
                                },
                                "Provider": Object {
                                  "$$typeof": Symbol(react.provider),
                                  "_context": [Circular],
                                },
                                "_calculateChangedBits": null,
                                "_currentRenderer": null,
                                "_currentRenderer2": null,
                                "_currentValue": Object {
                                  "hasParent": false,
                                  "positionUpdateFns": Set {},
                                },
                                "_currentValue2": Object {
                                  "hasParent": false,
                                  "positionUpdateFns": Set {},
                                },
                                "_threadCount": 0,
                              },
                            ],
                          }
                        }
                      >
                        <PopperProvider
                          anchor={null}
                          onAnchorChange={[Function]}
                          scope={
                            Object {
                              "Popper": Array [
                                Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": Object {},
                                  "_currentRenderer2": null,
                                  "_currentValue": undefined,
                                  "_currentValue2": undefined,
                                  "_threadCount": 0,
                                },
                                Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": undefined,
                                  "_currentValue2": undefined,
                                  "_threadCount": 0,
                                },
                                Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": Object {
                                    "hasParent": false,
                                    "positionUpdateFns": Set {},
                                  },
                                  "_currentValue2": Object {
                                    "hasParent": false,
                                    "positionUpdateFns": Set {},
                                  },
                                  "_threadCount": 0,
                                },
                              ],
                            }
                          }
                        >
                          <TooltipProvider
                            contentId=""
                            disableHoverableContent={false}
                            onClose={[Function]}
                            onOpen={[Function]}
                            onTriggerChange={[Function]}
                            onTriggerEnter={[Function]}
                            onTriggerLeave={[Function]}
                            open={false}
                            stateAttribute="closed"
                            trigger={null}
                          >
                            <ForwardRef>
                              <TooltipTrigger
                                asChild={true}
                              >
                                <PopperAnchor
                                  __scopePopper={
                                    Object {
                                      "Popper": Array [
                                        Object {
                                          "$$typeof": Symbol(react.context),
                                          "Consumer": Object {
                                            "$$typeof": Symbol(react.context),
                                            "_calculateChangedBits": null,
                                            "_context": [Circular],
                                          },
                                          "Provider": Object {
                                            "$$typeof": Symbol(react.provider),
                                            "_context": [Circular],
                                          },
                                          "_calculateChangedBits": null,
                                          "_currentRenderer": Object {},
                                          "_currentRenderer2": null,
                                          "_currentValue": undefined,
                                          "_currentValue2": undefined,
                                          "_threadCount": 0,
                                        },
                                        Object {
                                          "$$typeof": Symbol(react.context),
                                          "Consumer": Object {
                                            "$$typeof": Symbol(react.context),
                                            "_calculateChangedBits": null,
                                            "_context": [Circular],
                                          },
                                          "Provider": Object {
                                            "$$typeof": Symbol(react.provider),
                                            "_context": [Circular],
                                          },
                                          "_calculateChangedBits": null,
                                          "_currentRenderer": null,
                                          "_currentRenderer2": null,
                                          "_currentValue": undefined,
                                          "_currentValue2": undefined,
                                          "_threadCount": 0,
                                        },
                                        Object {
                                          "$$typeof": Symbol(react.context),
                                          "Consumer": Object {
                                            "$$typeof": Symbol(react.context),
                                            "_calculateChangedBits": null,
                                            "_context": [Circular],
                                          },
                                          "Provider": Object {
                                            "$$typeof": Symbol(react.provider),
                                            "_context": [Circular],
                                          },
                                          "_calculateChangedBits": null,
                                          "_currentRenderer": null,
                                          "_currentRenderer2": null,
                                          "_currentValue": Object {
                                            "hasParent": false,
                                            "positionUpdateFns": Set {},
                                          },
                                          "_currentValue2": Object {
                                            "hasParent": false,
                                            "positionUpdateFns": Set {},
                                          },
                                          "_threadCount": 0,
                                        },
                                      ],
                                    }
                                  }
                                  asChild={true}
                                >
                                  <Primitive.div
                                    asChild={true}
                                  >
                                    <Slot>
                                      <SlotClone>
                                        <Primitive.button
                                          asChild={true}
                                          data-state="closed"
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onPointerDown={[Function]}
                                          onPointerLeave={[Function]}
                                          onPointerMove={[Function]}
                                        >
                                          <Slot
                                            data-state="closed"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onFocus={[Function]}
                                            onPointerDown={[Function]}
                                            onPointerLeave={[Function]}
                                            onPointerMove={[Function]}
                                          >
                                            <SlotClone
                                              data-state="closed"
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onFocus={[Function]}
                                              onPointerDown={[Function]}
                                              onPointerLeave={[Function]}
                                              onPointerMove={[Function]}
                                            >
                                              <button
                                                aria-label="Close feedback"
                                                className="link--gray"
                                                data-state="closed"
                                                id="feedback-close-button"
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onFocus={[Function]}
                                                onPointerDown={[Function]}
                                                onPointerLeave={[Function]}
                                                onPointerMove={[Function]}
                                              >
                                                <Icon
                                                  name="close"
                                                >
                                                  <AccessibleIcon
                                                    label="close"
                                                  >
                                                    <svg
                                                      aria-hidden="true"
                                                      className="events-none icon"
                                                      data-testid="icon-close"
                                                      focusable="false"
                                                      style={
                                                        Object {
                                                          "height": 18,
                                                          "width": 18,
                                                        }
                                                      }
                                                    >
                                                      <use
                                                        xlinkHref="#icon-close"
                                                        xmlnsXlink="http://www.w3.org/1999/xlink"
                                                      />
                                                    </svg>
                                                    <VisuallyHidden>
                                                      <Primitive.span
                                                        style={
                                                          Object {
                                                            "border": 0,
                                                            "clip": "rect(0, 0, 0, 0)",
                                                            "height": 1,
                                                            "margin": -1,
                                                            "overflow": "hidden",
                                                            "padding": 0,
                                                            "position": "absolute",
                                                            "whiteSpace": "nowrap",
                                                            "width": 1,
                                                            "wordWrap": "normal",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          style={
                                                            Object {
                                                              "border": 0,
                                                              "clip": "rect(0, 0, 0, 0)",
                                                              "height": 1,
                                                              "margin": -1,
                                                              "overflow": "hidden",
                                                              "padding": 0,
                                                              "position": "absolute",
                                                              "whiteSpace": "nowrap",
                                                              "width": 1,
                                                              "wordWrap": "normal",
                                                            }
                                                          }
                                                        >
                                                          close
                                                        </span>
                                                      </Primitive.span>
                                                    </VisuallyHidden>
                                                  </AccessibleIcon>
                                                </Icon>
                                              </button>
                                            </SlotClone>
                                          </Slot>
                                        </Primitive.button>
                                      </SlotClone>
                                    </Slot>
                                  </Primitive.div>
                                </PopperAnchor>
                              </TooltipTrigger>
                            </ForwardRef>
                            <TooltipPortal>
                              <TooltipPortalProvider>
                                <Presence
                                  present={false}
                                />
                              </TooltipPortalProvider>
                            </TooltipPortal>
                          </TooltipProvider>
                        </PopperProvider>
                      </Popper>
                    </Tooltip>
                  </TooltipProviderProvider>
                </TooltipProvider>
              </Tooltip>
            </div>
          </div>
          <div
            className="mb6 prose"
          >
            <div
              className="align-center prose relative"
            >
              <div
                className="mt-neg30 inline-block"
              >
                <BookImage
                  size={75}
                >
                  <svg
                    height={75}
                    viewBox="0 0 108 108"
                    width={75}
                  >
                    <circle
                      cx="53"
                      cy="55"
                      fill="#47b9f3"
                      r="45"
                    />
                    <rect
                      fill="#1274c6"
                      height="34.501"
                      rx="5.219"
                      ry="5.219"
                      transform="rotate(.605 53.4 58.455)"
                      width="52.254"
                      x="27.273"
                      y="41.204"
                    />
                    <path
                      d="M64.1 34.848s-9.912-.76-10.008 8.42-.093 24.736-.093 24.736S58.822 64.96 62.79 65l15.404.163A1.788 1.788 0 0 0 80 63.393l.281-26.601A1.773 1.773 0 0 0 78.527 35z"
                      fill="#309ef9"
                    />
                    <path
                      d="M43.971 34.157s10.21-.563 10.11 8.821S53.998 68 53.998 68s-5.25-2.957-9.331-3L28.78 64.83A1.786 1.786 0 0 1 27 63.04l.288-27.286A1.786 1.786 0 0 1 29.106 34z"
                      fill="#0d84fd"
                    />
                  </svg>
                </BookImage>
              </div>
              <p>
                <strong>
                  Thank you!
                </strong>
              </p>
              <p>
                Our documentation team will read your feedback. Thank you for helping us improve this 
                page
                .
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </FeedbackWrapper>
</Feedback>
`;
